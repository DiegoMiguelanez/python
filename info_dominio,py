#!/usr/bin/python3.7

import whois
import socket
import sys

# Códigos ANSI para colores
class Color:
    GREEN = '\033[92m'
    RED = '\033[91m'
    RESET = '\033[0m'

# Función para imprimir con color
def print_colored(text, color):
    print(f"{color}{text}{Color.RESET}")

def obtener_fecha_expiracion(dominio):
    try:
        info_dominio = whois.whois(dominio)
        return info_dominio.expiration_date.strftime("%Y-%m-%d %H:%M:%S") if isinstance(info_dominio.expiration_date, (list, tuple)) else info_dominio.expiration_date.strftime("%Y-%m-%d %H:%M:%S")
    except whois.parser.PywhoisError as e:
        return f"Error al obtener información del dominio: {str(e)}"

def nslookup_check_if_exists(dominio, tipo):
    try:
        # Intentar realizar la consulta DNS
        socket.gethostbyname(f"{tipo}{dominio}")
        return True
    except socket.gaierror:
        return False

argumentos = sys.argv[1:]

if argumentos:
    dominio = argumentos[0]
else:
    dominio = input("Por favor, ingresa el nombre de dominio: ")

# Encontrar registrador
try:
    print("Registrador actual:")
    info_dominio = whois.whois(dominio)
    registrador = info_dominio.registrar
    if registrador:
        print_colored(f"El dominio está registrado en {registrador}", Color.GREEN)
    else:
        raise ValueError("El resultado del registrador está vacío.")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)

# Encontrar Nameservers
try:
    print("Zona DNS:")
    info_dominio = whois.whois(dominio)
    nameservers = info_dominio.name_servers
    if nameservers:
        print_colored(', '.join(nameservers), Color.GREEN)
    else:
        raise ValueError("El resultado de la zona DNS está vacío.")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)

# Encontrar registros
# Registro A
try:
    print("Registro A:")
    if nslookup_check_if_exists(dominio, ""):
        registro_a = socket.gethostbyname(dominio)
        print_colored(registro_a, Color.GREEN)
    else:
        raise ValueError("El registro A no resuelve")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)

# Registro SMTP
try:
    print("Registro SMTP:")
    if nslookup_check_if_exists(dominio, "smtp."):
        registro_a_smtp = socket.gethostbyname(f"smtp.{dominio}")
        print_colored(registro_a_smtp, Color.GREEN)
    else:
        raise ValueError("El registro SMTP no resuelve")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)

# Registro IMAP
try:
    print("Registro IMAP:")
    if nslookup_check_if_exists(dominio, "imap."):
        registro_a_imap = socket.gethostbyname(f"imap.{dominio}")
        print_colored(registro_a_imap, Color.GREEN)
    else:
        raise ValueError("El registro IMAP no resuelve")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)

# Registro POP3
try:
    print("Registro POP3:")
    if nslookup_check_if_exists(dominio, "pop3."):
        registro_a_pop3 = socket.gethostbyname(f"pop3.{dominio}")
        print_colored(registro_a_pop3, Color.GREEN)
    else:
        raise ValueError("El registro POP3 no resuelve")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)

# Fecha de expiración
try:
    fecha_expiracion = obtener_fecha_expiracion(dominio)
    print(f"Fecha de expiración del dominio: {fecha_expiracion}")
except Exception as e:
    print_colored(f"Error: {e}", Color.RED)
